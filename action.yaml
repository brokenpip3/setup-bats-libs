name: Setup Bats libs
description: A GitHub Action for installing Bats-libs(support, assert, detik)
author: Brokenpip3
branding:
  color: yellow
  icon: command
inputs:
  # support
  support-install:
    description: "Bats-support installation, default to true"
    required: false
    default: true
  support-version:
    description: "Bats-support version, default to latest"
    required: false
    default: "0.3.0"
  support-path:
    description: "Bats-support path, default to /usr/lib/bats-support"
    required: false
    default: "/usr/lib/bats-support"
  support-clean:
    description: "Bats-support: clean temp files"
    required: false
    default: true
  # assert
  assert-install:
    description: "Bats-assert installation, default to true"
    required: false
    default: true
  assert-version:
    description: "Bats-assert version, default to latest"
    required: false
    default: "2.1.0"
  assert-path:
    description: "Bats-assert path, default to /usr/lib/bats-assert"
    required: false
    default: "/usr/lib/bats-assert"
  assert-clean:
    description: "Bats-assert: clean temp files"
    required: false
    default: true
  # detik
  detik-install:
    description: "Bats-detik installation, default to true"
    required: false
    default: true
  detik-version:
    description: "Bats-detik version, default to latest"
    required: false
    default: "1.1.0"
  detik-path:
    description: "Bats-detik path, default to /usr/lib/bats-detik"
    required: false
    default: "/usr/lib/bats-detik"
  detik-clean:
    description: "Bats-detik: clean temp files"
    required: false
    default: true
  # file
  file-install:
    description: "Bats-file installation, default to true"
    required: false
    default: true
  file-version:
    description: "Bats-file version, default to latest"
    required: false
    default: "0.3.0"
  file-path:
    description: "Bats-file path, default to /usr/lib/bats-file"
    required: false
    default: "/usr/lib/bats-file"
  file-clean:
    description: "Bats-file: clean temp files"
    required: false
    default: true
runs:
  using: composite
  steps:
    # This could be much easier only if matrix steps will be supported in a composite action

    - name: "Set cache for Bats-support"
      uses: actions/cache@v3
      if: inputs.support-install == 'true'
      id: support-cache
      env:
        VERSION: ${{ inputs.support-version }}
        DESTDIR: ${{ inputs.support-path }}
      with:
        path: ${{ inputs.support-path }}
        key: ${{ runner.os }}-${{ inputs.support-path }}-${{ inputs.support-version }}

    - name: "Download and install Bats-support"
      if: inputs.support-install == 'true' && steps.support-cache.outputs.cache-hit != 'true'
      shell: bash
      env:
        VERSION: ${{ inputs.support-version }}
        DESTDIR: ${{ inputs.support-path }}
      run: |
        TEMPDIR="/tmp/bats-support"
        url="https://github.com/bats-core/bats-support/archive/refs/tags/v${VERSION}.tar.gz"

        mkdir -p ${TEMPDIR}
        sudo mkdir -p ${DESTDIR}/src/
        curl -sL ${url} | tar xvz -C ${TEMPDIR} --strip-components 1 && cd ${TEMPDIR}
        # Archlinux style, except that we are not in a fakeroot env so we need to use sudo
        sudo install -Dm755 load.bash ${DESTDIR}/load.bash
        for fn in src/*.bash; do
          sudo install -Dm755 $fn \
             ${DESTDIR}/src/$(basename $fn)
        done
        # Cleanup bats-support if required
        [[ "${{ inputs.support-clean }}" = "true"  ]] && rm -rf ${TEMPDIR} || exit 0

    - name: "Set cache for Bats-Assert"
      uses: actions/cache@v3
      id: assert-cache
      env:
        VERSION: ${{ inputs.support-version }}
        DESTDIR: ${{ inputs.support-path }}
      with:
        path: ${{ inputs.support-path }}
        key: ${{ runner.os }}-${{ inputs.support-path }}-${{ inputs.support-version }}

    - name: "Download and install Bats-assert"
      if: inputs.assert-install == 'true' && steps.assert-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        VERSION=${{ inputs.assert-version }}
        DESTDIR=${{ inputs.assert-path }}
        TEMPDIR="/tmp/bats-assert"
        url="https://github.com/bats-core/bats-assert/archive/refs/tags/v${VERSION}.tar.gz"

        mkdir -p ${TEMPDIR}
        sudo mkdir -p ${DESTDIR}/src/
        curl -sL ${url} | tar xvz -C ${TEMPDIR} --strip-components 1 && cd ${TEMPDIR}
        # Archlinux style, except that we are not in a fakeroot env so we need to use sudo
        sudo install -Dm755 load.bash ${DESTDIR}/load.bash
        for fn in src/*.bash; do
          sudo install -Dm755 $fn \
             ${DESTDIR}/src/$(basename $fn)
        done
        # Cleanup bats-support if required
        [[ "${{ inputs.assert-clean }}" = "true"  ]] && rm -rf ${TEMPDIR} || exit 0
    - name: "Download and install Bats-detik"
      if: inputs.detik-install == 'true'
      shell: bash
      run: |
        VERSION=${{ inputs.detik-version }}
        DESTDIR=${{ inputs.detik-path }}
        TEMPDIR="/tmp/bats-detik"
        url="https://github.com/bats-core/bats-detik/archive/refs/tags/v${VERSION}.tar.gz"

        mkdir -p ${TEMPDIR}
        sudo mkdir -p ${DESTDIR}/src/
        curl -sL ${url} | tar xvz -C ${TEMPDIR} --strip-components 1 && cd ${TEMPDIR}
        # Archlinux style, except that we are not in a fakeroot env so we need to use sudo
        for fn in lib/*.bash; do
          sudo install -Dm755 $fn \
             ${DESTDIR}/$(basename $fn)
        done
        # Cleanup bats-support if required
        [[ "${{ inputs.detik-clean }}" = "true"  ]] && rm -rf ${TEMPDIR} || exit 0
    - name: "Download and install Bats-file"
      if: inputs.file-install == 'true'
      shell: bash
      run: |
        VERSION=${{ inputs.file-version }}
        DESTDIR=${{ inputs.file-path }}
        TEMPDIR="/tmp/bats-file"
        url="https://github.com/bats-core/bats-file/archive/refs/tags/v${VERSION}.tar.gz"

        mkdir -p ${TEMPDIR}
        sudo mkdir -p ${DESTDIR}/src/
        curl -sL ${url} | tar xvz -C ${TEMPDIR} --strip-components 1 && cd ${TEMPDIR}
        # Archlinux style, except that we are not in a fakeroot env so we need to use sudo
        sudo install -Dm755 load.bash ${DESTDIR}/load.bash
        for fn in src/*.bash; do
          sudo install -Dm755 $fn \
             ${DESTDIR}/src/$(basename $fn)
        done
        # Cleanup bats-support if required
        [[ "${{ inputs.file-clean }}" = "true"  ]] && rm -rf ${TEMPDIR} || exit 0
