name: Setup Bats libs
description: A GitHub Action for installing Bats-libs (support, assert, detik, file)
author: Brokenpip3
branding:
  color: yellow
  icon: command
inputs:
  # generic
  bats-lib-path:
    description: "Default localtion for bats libs, this will be exposed to bats binary with the well-know BATS_LIB_PATH"
    required: false
    default: "/usr/lib/bats"
  # support
  support-install:
    description: "Bats-support installation, default to true"
    required: false
    default: true
  support-version:
    description: "Bats-support version, default to latest"
    required: false
    default: "0.3.0"
  support-clean:
    description: "Bats-support: clean temp files"
    required: false
    default: true
  # assert
  assert-install:
    description: "Bats-assert installation, default to true"
    required: false
    default: true
  assert-version:
    description: "Bats-assert version, default to latest"
    required: false
    default: "2.1.0"
  assert-clean:
    description: "Bats-assert: clean temp files"
    required: false
    default: true
  # detik
  detik-install:
    description: "Bats-detik installation, default to true"
    required: false
    default: true
  detik-version:
    description: "Bats-detik version, default to latest"
    required: false
    default: "1.1.0"
  detik-clean:
    description: "Bats-detik: clean temp files"
    required: false
    default: true
  # file
  file-install:
    description: "Bats-file installation, default to true"
    required: false
    default: true
  file-version:
    description: "Bats-file version, default to latest"
    required: false
    default: "0.3.0"
  file-clean:
    description: "Bats-file: clean temp files"
    required: false
    default: true
runs:
  using: composite
  steps:
    # By default BATS_LIB_PATH is /usr/lib/bats but the github runner user
    # does not have the grants to write outside the home directory,
    # you need to use sudo to write under /usr/lib.
    # Also the cache will not work if needs to use sudo to restore the file.
    # To support the migration from the previous version of this action
    # we are going to change the default local path to XDG .local
    # and make a symbolic link to BATS_LIB_PATH if is outside the home dir.
    - name: "Check if BATS_LIB_PATH is outside HOME"
      shell: bash
      run: |
        if [[ ! "${{ inputs.bats-lib-path }}" == "$HOME"* ]]; then
          sudo mkdir -p ${{ inputs.bats-lib-path }}
          mkdir -p $HOME/.local/share
          sudo ln -s ${{ inputs.bats-lib-path }} $HOME/.local/share/bats
          sudo chown 1001:1001 $HOME/.local/share/bats
          ls -l $HOME/.local/share/
          echo "BATS_LIB_PATH=${{ inputs.inputs.bats-lib-path }}" >> $GITHUB_ENV
          echo "BATS_LIB_PATH was ${{ inputs.bats-lib-path }}, symlinked to $HOME/.local/share/bats"
        else
          echo "BATS_LIB_PATH=${{ inputs.bats-lib-path }}" >> $GITHUB_ENV
          # In case is not present
          mkdir -p ${{ inputs.bats-lib-path }}
          echo "BATS_LIB_PATH is ${{ inputs.bats-lib-path }}"
        fi
        mkdir -p $BATS_LIB_PATH/bats-{support,assert,detik,file}

    # This could be much easier if only matrix steps will be supported in a composite action
    - name: "Set cache for Bats-support"
      uses: actions/cache@v3
      if: inputs.support-install == 'true'
      id: support-cache
      with:
        path: ${{ env.BATS_LIB_PATH }}/bats-support
        key: ${{ runner.os }}-${{ env.BATS_LIB_PATH }}-bats-support-${{ inputs.support-version }}

    - name: "Download and install Bats-support"
      if: inputs.support-install == 'true' && steps.support-cache.outputs.cache-hit != 'true'
      shell: bash
      env:
        VERSION: ${{ inputs.support-version }}
      run: |
        DESTDIR=${{ env.BATS_LIB_PATH }}/bats-support
        TEMPDIR="/tmp/bats-support"
        url="https://github.com/bats-core/bats-support/archive/refs/tags/v${VERSION}.tar.gz"

        mkdir -p ${TEMPDIR}
        mkdir -p ${DESTDIR}/src/
        curl -sL ${url} | tar xz -C ${TEMPDIR} --strip-components 1 && cd ${TEMPDIR}
        # Archlinux style, except that we are not in a fakeroot env
        install -Dm755 load.bash ${DESTDIR}/load.bash
        for fn in src/*.bash; do
          install -Dm755 $fn \
             ${DESTDIR}/src/$(basename $fn)
        done
        echo "Bats support successfully installed, version: ${{ inputs.support-version }}"
        # Cleanup bats-support if required
        [[ "${{ inputs.support-clean }}" = "true"  ]] && rm -rf ${TEMPDIR} || exit 0

    - name: "Set cache for Bats-assert"
      uses: actions/cache@v3
      if: inputs.assert-install == 'true'
      id: assert-cache
      with:
        path: ${{ env.BATS_LIB_PATH }}/bats-assert
        key: ${{ runner.os }}-${{ env.BATS_LIB_PATH }}-bats-assert-${{ inputs.assert-version }}

    - name: "Download and install Bats-assert"
      if: inputs.assert-install == 'true' && steps.assert-cache.outputs.cache-hit != 'true'
      shell: bash
      env:
        VERSION: ${{ inputs.assert-version }}
        DESTDIR: ${{ env.BATS_LIB_PATH }}/bats-assert
      run: |
        DESTDIR=${{ env.BATS_LIB_PATH }}/bats-assert
        TEMPDIR="/tmp/bats-assert"
        url="https://github.com/bats-core/bats-assert/archive/refs/tags/v${VERSION}.tar.gz"

        mkdir -p ${TEMPDIR}
        mkdir -p ${DESTDIR}/src/
        curl -sL ${url} | tar xz -C ${TEMPDIR} --strip-components 1 && cd ${TEMPDIR}
        # Archlinux style, except that we are not in a fakeroot env
        ls -l ${TEMPDIR}/load.bash
        install -Dm755 load.bash ${DESTDIR}/load.bash
        for fn in src/*.bash; do
          install -Dm755 $fn \
             ${DESTDIR}/src/$(basename $fn)
        done
        echo "Bats assert successfully installed, version: ${{ inputs.assert-version }}"
        # Cleanup bats-assert if required
        [[ "${{ inputs.assert-clean }}" = "true"  ]] && rm -rf ${TEMPDIR} || exit 0

    - name: "Set cache for Bats-file"
      uses: actions/cache@v3
      if: inputs.file-install == 'true'
      id: file-cache
      with:
        path: ${{ env.BATS_LIB_PATH }}/bats-file
        key: ${{ runner.os }}-${{ env.BATS_LIB_PATH }}-bats-file-${{ inputs.file-version }}

    - name: "Download and install Bats-file"
      if: inputs.file-install == 'true' && steps.file-cache.outputs.cache-hit != 'true'
      shell: bash
      env:
        VERSION: ${{ inputs.file-version }}
      run: |
        DESTDIR=${{ env.BATS_LIB_PATH }}/bats-file
        TEMPDIR="/tmp/bats-file"
        url="https://github.com/bats-core/bats-file/archive/refs/tags/v${VERSION}.tar.gz"

        mkdir -p ${TEMPDIR}
        mkdir -p ${DESTDIR}/src/
        curl -sL ${url} | tar xz -C ${TEMPDIR} --strip-components 1 && cd ${TEMPDIR}
        # Archlinux style, except that we are not in a fakeroot env
        install -Dm755 load.bash ${DESTDIR}/load.bash
        for fn in src/*.bash; do
          install -Dm755 $fn \
             ${DESTDIR}/src/$(basename $fn)
        done
        echo "Bats file successfully installed, version: ${{ inputs.file-version }}"
        # Cleanup bats-file if required
        [[ "${{ inputs.file-clean }}" = "true"  ]] && rm -rf ${TEMPDIR} || exit 0

    - name: "Set cache for Bats-detik"
      uses: actions/cache@v3
      if: inputs.detik-install == 'true'
      id: detik-cache
      with:
        path: ${{ env.BATS_LIB_PATH }}/bats-detik
        key: ${{ runner.os }}-${{ env.BATS_LIB_PATH }}-bats-detik-${{ inputs.detik-version }}

    - name: "Download and install Bats-detik"
      if: inputs.detik-install == 'true' && steps.detik-cache.outputs.cache-hit != 'true'
      shell: bash
      env:
        VERSION: ${{ inputs.detik-version }}
      run: |
        TEMPDIR="/tmp/bats-detik"
        DESTDIR=${{ env.BATS_LIB_PATH }}/bats-detik
        url="https://github.com/bats-core/bats-detik/archive/refs/tags/v${VERSION}.tar.gz"

        mkdir -p ${TEMPDIR}
        mkdir -p ${DESTDIR}/src/
        curl -sL ${url} | tar xz -C ${TEMPDIR} --strip-components 1 && cd ${TEMPDIR}
        # Archlinux style, except that we are not in a fakeroot env
        for fn in lib/*.bash; do
          install -Dm755 $fn \
             ${DESTDIR}/$(basename $fn)
        done
        echo "Bats detik successfully installed, version: ${{ inputs.detik-version }}"
        # Cleanup bats-detik if required
        [[ "${{ inputs.detik-clean }}" = "true"  ]] && rm -rf ${TEMPDIR} || exit 0
