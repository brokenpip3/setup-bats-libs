name: Setup Bats and libs
description: A GitHub Action for installing Bats and Bats-libs(support, assert, detik, file)
author: Brokenpip3
branding:
  color: yellow
  icon: command
inputs:
  # Bats binary
  bats-install:
    description: "Bats installation, default to true"
    required: false
    default: true
  bats-version:
    description: "Bats version, default to latest (1.10.0 atm)"
    required: false
  # support
  support-install:
    description: "Bats-support installation, default to true"
    required: false
    default: true
  support-version:
    description: "Bats-support version, default to latest"
    required: false
    default: "0.3.0"
  support-path:
    description: "Bats-support path, default to /usr/lib/bats-support"
    required: false
    default: "/usr/lib/bats-support"
  support-clean:
    description: "Bats-support: clean temp files"
    required: false
    default: true
  # assert
  assert-install:
    description: "Bats-assert installation, default to true"
    required: false
    default: true
  assert-version:
    description: "Bats-assert version, default to latest"
    required: false
    default: "2.1.0"
  assert-path:
    description: "Bats-assert path, default to /usr/lib/bats-assert"
    required: false
    default: "/usr/lib/bats-assert"
  assert-clean:
    description: "Bats-assert: clean temp files"
    required: false
    default: true
  # detik
  detik-install:
    description: "Bats-detik installation, default to true"
    required: false
    default: true
  detik-version:
    description: "Bats-detik version, default to latest"
    required: false
    default: "1.2.0"
  detik-path:
    description: "Bats-detik path, default to /usr/lib/bats-detik"
    required: false
    default: "/usr/lib/bats-detik"
  detik-clean:
    description: "Bats-detik: clean temp files"
    required: false
    default: true
  # file
  file-install:
    description: "Bats-file installation, default to true"
    required: false
    default: true
  file-version:
    description: "Bats-file version, default to latest"
    required: false
    default: "0.3.0"
  file-path:
    description: "Bats-file path, default to /usr/lib/bats-file"
    required: false
    default: "/usr/lib/bats-file"
  file-clean:
    description: "Bats-file: clean temp files"
    required: false
    default: true
outputs:
  bats-installed:
    description: "True/False if bats has been installed"
    value: ${{ steps.bats-install.outputs.installed }}
  support-installed:
    description: "True/False if bats-support has been installed"
    value: ${{ steps.support-install.outputs.installed }}
  assert-installed:
    description: "True/False if bats-assert has been installed"
    value: ${{ steps.assert-install.outputs.installed }}
  detik-installed:
    description: "True/False if bats-detik has been installed"
    value: ${{ steps.detik-install.outputs.installed }}
  file-installed:
    description: "True/False if bats-file has been installed"
    value: ${{ steps.file-install.outputs.installed }}

runs:
  using: composite
  steps:
    # This action would be much easier if only matrix steps will be supported in a composite action
    - name: "Set cache for Bats"
      uses: actions/cache@v3
      if: inputs.bats-install == 'true'
      id: bats-cache
      with:
        path: |
          ~/.local/share/bats
          ~/.local/bin/bats
        key: ${{ runner.os }}-bats

    - name: "Download and install Bats"
      if: inputs.bats-install == 'true' && steps.bats-cache.outputs.cache-hit != 'true'
      id: bats-install
      shell: bash
      run: |
        # In $HOME to avoid sudo requirements that eventually will be removed for the library as well
        VERSION=${{ inputs.bats-version }}
        DESTDIR="$HOME/.local/bin"
        LIBDIR="$HOME/.local/share/bats"
        TEMPDIR="/tmp/bats"
        URL="https://github.com/bats-core/bats-core/"

        # From https://github.com/fluxcd/flux2/blob/44d69d6fc0c353e79c1bad021a4aca135033bce8/action/action.yml#L35
        if [[ -z "$VERSION" ]] || [[ "$VERSION" = "latest" ]]; then
          VERSION=$(curl -fsSL https://api.github.com/repos/bats-core/bats-core/releases/latest | grep tag_name | cut -d '"' -f 4)
        fi
        [[ $VERSION = v* ]] && VERSION="${VERSION:1}"

        mkdir -p ${TEMPDIR}
        mkdir -p ${DESTDIR}

        curl -sL ${URL}/archive/refs/tags/v${VERSION}.tar.gz | tar xz -C ${TEMPDIR} --strip-components 1 && cd ${TEMPDIR}

        # Archlinux style, except that we are not in a fakeroot env
        # https://gitlab.archlinux.org/archlinux/packaging/packages/bash-bats/-/blob/main/PKGBUILD
        sed -i 's|BATS_ROOT/libexec/bats-core/bats|BATS_ROOT/share/bats/bats|g' bin/bats
        sed -i 's|BATS_ROOT/lib/bats-core/|BATS_ROOT/share/bats/|g' libexec/bats-core/*
        sed -i 's|BATS_ROOT/lib/bats-core/|BATS_ROOT/share/bats/|g' lib/bats-core/*

        for fn in libexec/bats-core/*; do
          install -Dm755 ${fn} \
            ${LIBDIR}/$(basename ${fn})
        done

        install -Dm755 bin/bats "${DESTDIR}/bats"
        install -Dm755 lib/bats-core/* -t "${LIBDIR}"

        echo "Bats v$VERSION installed in $DESTDIR"
        rm -rf ${TEMPDIR} || exit 0

        echo "$DESTDIR" >> "$GITHUB_PATH"
        echo "installed=True" >> $GITHUB_OUTPUT

    - name: "Set cache for Bats-support"
      uses: actions/cache@v3
      if: inputs.support-install == 'true'
      id: support-cache
      with:
        path: ${{ inputs.support-path }}
        key: ${{ runner.os }}-bats-support

    - name: "Download and install Bats-support"
      if: inputs.support-install == 'true'&& steps.support-cache.outputs.cache-hit != 'true'
      id: support-install
      shell: bash
      run: |
        VERSION=${{ inputs.support-version }}
        DESTDIR=${{ inputs.support-path }}
        TEMPDIR="/tmp/bats-support"
        url="https://github.com/bats-core/bats-support/archive/refs/tags/v${VERSION}.tar.gz"

        mkdir -p ${TEMPDIR}
        [[ "${DESTDIR}" == "$HOME"* ]] && CMD="" || CMD="sudo"
        ${CMD} mkdir -p ${DESTDIR}/src/
        curl -sL ${url} | tar xz -C ${TEMPDIR} --strip-components 1 && cd ${TEMPDIR}
        # Archlinux style, except that we are not in a fakeroot env
        ${CMD} install -Dm755 load.bash ${DESTDIR}/load.bash
        for fn in src/*.bash; do
          ${CMD} install -Dm755 $fn \
             ${DESTDIR}/src/$(basename $fn)
        done
        echo "Bats Support v$VERSION installed in $DESTDIR"
        # Cleanup bats-support if required
        [[ "${{ inputs.support-clean }}" = "true"  ]] && rm -rf ${TEMPDIR} || exit 0
        echo "installed=True" >> "$GITHUB_OUTPUT"

    - name: "Set cache for Bats-assert"
      uses: actions/cache@v3
      if: inputs.assert-install == 'true'
      id: assert-cache
      with:
        path: ${{ inputs.support-path }}
        key: ${{ runner.os }}-bats-assert

    - name: "Download and install Bats-assert"
      if: inputs.assert-install == 'true' && steps.assert-cache.outputs.cache-hit != 'true'
      id: assert-install
      shell: bash
      run: |
        VERSION=${{ inputs.assert-version }}
        DESTDIR=${{ inputs.assert-path }}
        TEMPDIR="/tmp/bats-assert"
        url="https://github.com/bats-core/bats-assert/archive/refs/tags/v${VERSION}.tar.gz"

        mkdir -p ${TEMPDIR}
        [[ "${DESTDIR}" == "$HOME"* ]] && CMD="" || CMD="sudo"
        ${CMD} mkdir -p ${DESTDIR}/src/
        curl -sL ${url} | tar xz -C ${TEMPDIR} --strip-components 1 && cd ${TEMPDIR}
        # Archlinux style, except that we are not in a fakeroot env
        ${CMD} install -Dm755 load.bash ${DESTDIR}/load.bash
        for fn in src/*.bash; do
          ${CMD} install -Dm755 $fn \
             ${DESTDIR}/src/$(basename $fn)
        done
        echo "Bats Assert v$VERSION installed in $DESTDIR"
        # Cleanup bats-support if required
        [[ "${{ inputs.assert-clean }}" = "true"  ]] && rm -rf ${TEMPDIR} || exit 0
        echo "installed=True" >> "$GITHUB_OUTPUT"

    - name: "Set cache for Bats-detik"
      uses: actions/cache@v3
      if: inputs.detik-install == 'true'
      id: detik-cache
      with:
        path: ${{ inputs.support-path }}
        key: ${{ runner.os }}-bats-detik

    - name: "Download and install Bats-detik"
      if: inputs.detik-install == 'true' && steps.detik-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        VERSION=${{ inputs.detik-version }}
        DESTDIR=${{ inputs.detik-path }}
        TEMPDIR="/tmp/bats-detik"
        url="https://github.com/bats-core/bats-detik/archive/refs/tags/v${VERSION}.tar.gz"

        mkdir -p ${TEMPDIR}
        [[ "${DESTDIR}" == "$HOME"* ]] && CMD="" || CMD="sudo"
        ${CMD} mkdir -p ${DESTDIR}/src/
        curl -sL ${url} | tar xz -C ${TEMPDIR} --strip-components 1 && cd ${TEMPDIR}
        # Archlinux style, except that we are not in a fakeroot env so we need to use sudo
        for fn in lib/*.bash; do
          ${CMD} install -Dm755 $fn \
             ${DESTDIR}/$(basename $fn)
        done
        echo "Bats Detik v$VERSION installed in $DESTDIR"
        # Cleanup bats-support if required
        [[ "${{ inputs.detik-clean }}" = "true"  ]] && rm -rf ${TEMPDIR} || exit 0
        echo "installed=True" >> "$GITHUB_OUTPUT"

    - name: "Set cache for Bats-file"
      uses: actions/cache@v3
      if: inputs.file-install == 'true'
      id: file-cache
      with:
        path: ${{ inputs.support-path }}
        key: ${{ runner.os }}-bats-file

    - name: "Download and install Bats-file"
      if: inputs.file-install == 'true'
      if: inputs.file-install == 'true' && steps.file-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        VERSION=${{ inputs.file-version }}
        DESTDIR=${{ inputs.file-path }}
        TEMPDIR="/tmp/bats-file"
        url="https://github.com/bats-core/bats-file/archive/refs/tags/v${VERSION}.tar.gz"

        mkdir -p ${TEMPDIR}
        [[ "${DESTDIR}" == "$HOME"* ]] && CMD="" || CMD="sudo"
        ${CMD} mkdir -p ${DESTDIR}/src/
        curl -sL ${url} | tar xz -C ${TEMPDIR} --strip-components 1 && cd ${TEMPDIR}
        # Archlinux style, except that we are not in a fakeroot env
        ${CMD} install -Dm755 load.bash ${DESTDIR}/load.bash
        for fn in src/*.bash; do
          ${CMD} install -Dm755 $fn \
             ${DESTDIR}/src/$(basename $fn)
        done
        echo "Bats File v$VERSION installed in $DESTDIR"
        # Cleanup bats-support if required
        [[ "${{ inputs.file-clean }}" = "true"  ]] && rm -rf ${TEMPDIR} || exit 0
        echo "installed=True" >> "$GITHUB_OUTPUT"
